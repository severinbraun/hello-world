name: Build & Push (Mono-Repo)

on:
  push:
    branches: [main, master]
    tags: ['v*']                 # baut beim Tag-Push
  release:
    types: [published]           # baut beim Release (publish)
  workflow_dispatch:
    inputs:
      version:
        description: "SemVer ohne 'v' (z.B. 1.2.3) – nur für manuellen Run"
        required: false
        type: string

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/hello-world

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (mit Tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0          # alle Commits
          fetch-tags: true        # alle Tags

      - name: Resolve Version (Tag/Release/Manual)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          VER_INPUT="${{ github.event.inputs.version || '' }}"
          VER_TAG=""
          # 1) Tag-Push
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            # refs/tags/v1.2.3 -> 1.2.3
            VER_TAG="${GITHUB_REF_NAME#v}"
          fi
          # 2) Release-Event
          if [ -z "${VER_TAG}" ] && [ "${{ github.event_name }}" = "release" ]; then
            # release.tag_name: v1.2.3 oder 1.2.3
            T="${{ github.event.release.tag_name }}"
            VER_TAG="${T#v}"
          fi
          # 3) Manueller Input
          VER="${VER_INPUT:-$VER_TAG}"

          # Falls nix gesetzt, leer lassen
          if [ -z "${VER}" ]; then
            echo "version=" >> $GITHUB_OUTPUT
            echo "major="   >> $GITHUB_OUTPUT
            echo "minor="   >> $GITHUB_OUTPUT
            echo "extra_tags=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # PARSEN: MAJOR.MINOR.PATCH
          IFS='.' read -r MAJOR MINOR PATCH <<<"${VER}"

          # Extra-Tagliste (Zeilengetrennt), die wir buildx direkt geben
          {
            echo "ghcr.io/${{ env.IMAGE_NAME }}:v${VER}"
            echo "ghcr.io/${{ env.IMAGE_NAME }}:${VER}"
            echo "ghcr.io/${{ env.IMAGE_NAME }}:${MAJOR}.${MINOR}"
            echo "ghcr.io/${{ env.IMAGE_NAME }}:${MAJOR}"
          } > /tmp/extra_tags.txt

          echo "version=${VER}" >> $GITHUB_OUTPUT
          echo "major=${MAJOR}" >> $GITHUB_OUTPUT
          echo "minor=${MINOR}" >> $GITHUB_OUTPUT
          echo "extra_tags=$(tr '\n' ',' < /tmp/extra_tags.txt | sed 's/,$//')" >> $GITHUB_OUTPUT

      - name: Docker meta (branch/latest/sha)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Standard-Tags (immer)
          tags: |
            type=ref,event=branch         # z.B. main
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short,prefix=sha-
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ github.ref_name }}

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: containers/hello-world
          file: containers/hello-world/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          # Kombiniere die Standard-Tags mit den SemVer-Tags (falls vorhanden)
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ steps.ver.outputs.extra_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            OWNER=${{ github.repository_owner }}
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary (welche Tags wurden gepusht)
        run: |
          echo "Pushed tags:"
          printf '%s\n' "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' | sed 's/^/- /'
          if [ -n "${{ steps.ver.outputs.extra_tags }}" ]; then
            echo "${{ steps.ver.outputs.extra_tags }}" | tr ',' '\n' | sed 's/^/- /'
          fi
