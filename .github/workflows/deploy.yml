name: Deploy to Synology via SSH

on:
  push:
    branches: [ "main" ]   # ggf. anpassen
  workflow_dispatch:        # manueller Trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
      # Holt den aktuellen Stand deines Repos
        uses: actions/checkout@v4

      - name: Preload known_hosts (SSH Fingerprint)
      # Verhindert interaktive Rückfragen beim ersten SSH-Kontakt
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${SSH_PORT}" "${SSH_HOST}" >> ~/.ssh/known_hosts

      - name: Sync compose files to NAS
      # Kopiert docker-compose.yml (+ optional .env/compose-Verzeichnis) auf die Synology
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            docker-compose.yml
            .env
            compose/*
          target: ${{ secrets.REMOTE_PATH }}
          overwrite: true
          rm: false

      - name: Deploy with Docker Compose
      # Baut/pullt Images und startet Services idempotent neu
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          envs: REMOTE_PATH,USE_SUDO
          script: |
            set -euo pipefail
            CD_CMD="cd \"$REMOTE_PATH\""
            COMPOSE_CMD="docker compose"      # Falls du nur 'docker-compose' hast: 'docker-compose' eintragen
            # Optional sudo
            if [ "${USE_SUDO:-false}" = "true" ]; then
              SUDO="sudo -E"
            else
              SUDO=""
            fi

            $CD_CMD

            # Pull & Build & Up in einem Rutsch (zero/low downtime)
            $SUDO $COMPOSE_CMD up -d --pull always --build --remove-orphans

            # Optional: Aufräumen nicht mehr genutzter Images (keine Volumes!)
            $SUDO docker image prune -f || true
